*4. Practical Component: Simple Scalable Web Application*

Here's an example of a simple real-time chat application using Node.js and Socket.io:
const express = require('express');
const app = express();
const server = require('http').createServer(app);
const io = require('socket.io')(server);

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/index.html');
});

io.on('connection', (socket) => {
  console.log('a new client connected');

  socket.on('chat message', (msg) => {
    io.emit('chat message', msg);
  });

  socket.on('disconnect', () => {
    console.log('a client disconnected');
  });
});

server.listen(3000, () => {
  console.log('listening on *:3000');
});
This application demonstrates Node.js's real-time capabilities and scalability features.
